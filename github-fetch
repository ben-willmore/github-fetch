#!/bin/bash

## functions

apiurl=https://api.github.com

LANG=C

urlencode () {
    local l=${#1}
    for (( i = 0 ; i < l ; i++ )); do
        local c=${1:i:1}
        case "$c" in
            [a-zA-Z0-9.~_-]) printf "$c" ;;
            ' ') printf + ;;
            *) printf '%%%.2X' "'$c"
        esac
    done
}

urldecode () {
    local data=${1//+/ }
    printf '%b' "${data//%/\\x}"
}

github_api () {
  if [[ $use_curl == true ]]; then
    res=$(curl -sS $1)
    code=$?
  else
    res=$(wget -qO- $1)
    code=$?
  fi

  n_api_calls=$((n_api_calls+1))
  echo $res
  exit $code
}

get_rate_limit() {
  res=$(github_api $apiurl/rate_limit)
  limit=$(echo $res | jq ".rate.limit")
  remaining=$(echo $res | jq ".rate.remaining")
  reset_epoch=$(echo $res | jq ".rate.reset")
  reset_str=$(date -d @$reset_epoch 2>/dev/null)
  if [[ $? != 0 ]]; then
    reset_str=$(date -j -f %s $reset_epoch 2>/dev/null)
  fi
  if [[ -z $reset_str ]]; then
    echo $remaining calls remaining \(of $limit\)
  else
    echo $remaining calls remaining \(of $limit\)\; reset at $reset_str
  fi
}

raise_api_error () {
  echo Error: $1
  echo

  api_limit=$(get_rate_limit)
  n_remaining="$(echo $api_limit | cut -d" " -f1)"
  if [[ $n_remaining == 0 ]]; then
    echo Github API rate limit reached:
    echo $api_limit
  else
    echo API URL: $2
    if [[ $n_api_calls == 0 ]]; then
      echo You probably provided an invalid or unsupported URL
    else
      echo Unknown failure
    fi
  fi
  echo
  exit 2
}

make_dir () {
  mkdir "${1}"
  if [[ $? != 0 ]]; then
    echo "Error -- could not make directory:"
    echo "`pwd`/${1}"
    echo
    exit 1
  fi
}

download_file () {
  if [[ $verbose == true ]]; then
    echo "Fetching \"${1}\""
    echo "as \"${2}\""
    echo "with perms \"${3}\""
  fi

  if [[ $use_curl == true ]]; then
    curl -sS -o "./${2}" "${1}"
  else
    wget -nv -O "./${2}" "${1}"
  fi
  if [[ $? != 0 ]]; then
    echo File download failed for URL:
    echo "${1}"
    exit 4
  fi
  if [[ ! -z "${3}"  ]]; then
    chmod "${3#100}" "${2}"
  fi
}

get_dir () {
  if [[ -z "${2}" ]]; then
    dest_dir="$(urldecode ${repo})"
    prefix=
  else
    base="$(basename ${2})"
    dest_dir="$(urldecode ${base})"
    prefix="${2}/"
  fi

  make_dir "${dest_dir}"
  cd "${dest_dir}"

  if [[ $n_api_calls == 0 ]]; then
    echo Base API URL: $1
    echo
  fi

  if [[ -z "${2}" ]]; then
    res="$(github_api $1?recursive=true)"
    if [[ $? != 0 ]]; then
      raise_api_error "API call failed" $1 >&2
    fi

  else
    res="$(github_api $1)"
    if [[ $? != 0 ]]; then
      raise_api_error "API call failed" $1 >&2
    fi
    root_tail="${2}"
    while [[ "${root_tail}" =~ .*./.* ]]; do
      root_head=$(echo ${root_tail} | cut -d/ -f1)
      root_tail=${root_tail#$root_head}
      root_head="$(urldecode ${root_head})"
      export root_head="${root_head}"
      tree_url="$(echo $res | jq -r '.tree[] | select(.type=="tree" and .path==$ENV.root_head) | .url' 2>/dev/null)"
      res="$(github_api $tree_url)"
      if [[ $? != 0 ]]; then
        raise_api_error "API call failed" $1 >&2
      fi

    done

    root_head="$(urldecode ${root_tail#/})"
    export root_head="${root_head}"
    tree_url="$(echo $res | jq -r '.tree[] | select(.type=="tree" and .path==$ENV.root_head) | .url' 2>/dev/null)"
    res="$(github_api $tree_url?recursive=true)"
    if [[ $? != 0 ]]; then
      raise_api_error "API call failed" $1 >&2
    fi

  fi

  file_urls="$(echo $res | jq -r '.tree[] | select(.type=="blob") | .url' 2>/dev/null)"
  if [[ $? != 0 ]]; then
    raise_api_error "Could not parse API response" "${1}"
  fi

  for url in ${file_urls}; do
    export url="${url}"
    filepaths=$(echo $res | jq -r '.tree[] | select(.url==$ENV.url) | .path')
    IFS=$'\n'
    for filepath in $filepaths; do
      dl_path="${filepath#$prefix}"
      dl_dir=$(dirname "${dl_path}")
      if [[ ! -z "${dl_dir}" ]]; then
        mkdir -p "${dl_dir}"
      fi
      export filepath="${filepath}"
      perms="$(echo $res | jq -r '.tree[] | select(.path==$ENV.filepath) | .mode')"
      dl_url="https://raw.githubusercontent.com/${user}/${repo}/${ref}/${root}/${filepath}"
      if [[ $verbose == true ]]; then
        echo Fetching \"${dl_url}\"
        echo as \"${dl_path}\"
        echo with perms \"${perms}\"
      fi
      download_file "${dl_url}" "${dl_path}" "${perms}"
    done
  done

  cd ..
}

get_file () {
  if [[ $n_api_calls == 0 ]]; then
    echo Base API URL: $1
    echo
  fi

  res="$(github_api $1)"
  if [[ $? != 0 ]]; then
    raise_api_error "API call failed" $1 >&2
  fi

  root_tail="${2}"
  while [[ "${root_tail}" =~ .*./.* ]]; do
    root_head=$(echo ${root_tail} | cut -d/ -f1)
    root_tail=${root_tail#$root_head/}
    root_head="$(urldecode ${root_head})"
    export root_head="${root_head}"    
    tree_url="$(echo $res | jq -r '.tree[] | select(.type=="tree" and .path==$ENV.root_head) | .url' 2>/dev/null)"
    res="$(github_api $tree_url)"
    if [[ $? != 0 ]]; then
      raise_api_error "API call failed" $1 >&2
    fi

  done

  root_head="$(urldecode ${root_tail#/})"
  export root_head="${root_head}"
  filepath="$(echo $res | jq -r '.tree[] | select(.type=="blob" and .path==$ENV.root_head) | .path' 2>/dev/null)"
  perms="$(echo $res | jq -r '.tree[] | select(.type=="blob" and .path==$ENV.root_head) | .mode' 2>/dev/null)"

  url="https://raw.githubusercontent.com/${user}/${repo}/${ref}/${2}"

  if [[ -e "${filepath}" ]]; then
    echo "Error: ${filename} already exists; can't create file"
    echo
    exit 3
  fi

  echo "Fetching ${url} to ${filepath} with perms ${perms}"
  download_file "${url}" "${filepath}" "${perms}"
}

## main program

if [[ $1 == '-h' ]] || [[ $1 == '--help' ]]; then
  echo
  echo Fetch a file or directory from Github
  echo
  echo Syntax: github-fetch \<url\> [\<dest_dir\>] where \<url\> is of the form:
  echo https://github.com/ben-willmore/github-fetch
  echo  \(whole repo, default branch\)
  echo https://github.com/ben-willmore/github-fetch/tree/testbranch/test
  echo  \(subdirectory, branch testbranch\)
  echo https://github.com/ben-willmore/github-fetch/tree/aa25db658a2013f8a0004cbdbff3ff59ce3e0aaa/test
  echo  \(subdirectory, specific commit\)
  echo https://github.com/ben-willmore/github-fetch/blob/main/README.md
  echo  \(single file, main branch\)
  echo
  echo You can get the URL by navigating to the relevant file/directory\'s page on github and then
  echo copy-pasting from the URL bar.
  echo
  echo If \<dest_dir\> is supplied, the fetched directory will be put there\;
  echo otherwise it will be put in the current directory.
  echo
  echo This should work on any unix system with basic tools installed
  echo \(bash, sed, grep, ...\), including jq and wget. 
  exit 0
fi

args=
for arg in "$@"; do
  if [[ ${arg:0:2} == "--" ]] ; then
    args+=" $arg"
  elif [[ ${arg:0:1} == "-" ]] ; then
    for (( i=0; i<${#arg}; i++ )); do
      case ${arg:$i:1} in
        l)
          args+=" --limit"
          ;;
        p)
          args+=" --parse-only"
          ;;
        c)
          args+=" --curl"
          ;;
        w)
          args+=" --wget"
          ;;
        v)
          args+=" --verbose"
          ;;
      esac
    done
  else
    if [[ -z $input_url ]]; then
      input_url=$arg
    else
      dest_dir=$arg
    fi
  fi
done

use_curl=false

for arg in $args; do
  case $arg in
    --*limit*)
      echo Github rate limit status:
      echo $(get_rate_limit)
      exit 0
      ;;
    --*parse*)
      parse_only=true
      ;;
    --*verb*)
      verbose=true
      ;;
    # --*wget*)
    #   use_curl=false
    #   ;; 
  esac
done

if [[ -z $input_url ]]; then
  echo Error: No URL was supplied
  echo
  exit 7
fi

# which_curl=$(which curl)
which_wget=$(which wget)

# if [[ -z $which_curl ]] && [[ -z $which_wget ]]; then
#   echo Error: Neither curl nor wget is available
#   echo
#   exit 8
# elif [[ $use_curl == true ]] && [[ -z $which_curl ]]; then
#   use_curl=false
# elif [[ $use_curl == false ]] && [[ -z $which_curl ]]; then
#   use_curl=true
# fi

if [[ -z $which_wget ]]; then
  echo Error: wget is not available
  echo
  exit 8
fi

# parse URL
# e.g. https://github.com/ben-willmore/portmaster/tree/main/perfectdark

proto="$(echo $input_url | grep :// | sed -e's,^\(.*://\).*,\1,g')"
url="$(echo ${input_url/$proto/})"

host="$(echo $url | cut -d/ -f1)"
url="$(echo ${url/$host\//})"

user="$(echo $url | cut -d/ -f1)"
url="$(echo ${url/$user\//})"

repo="$(echo $url | cut -d/ -f1)"
url="$(echo ${url/$repo\//})"

if [[ ${url} == ${repo} ]]; then
  # there is no tree|blob in the URL
  # use default branch and get whole repo
  type=tree
  ref=
  root=
  echo "Fetching ${user}:${repo} (whole repo, default branch)"
else
  type="$(echo ${url} | cut -d/ -f1)"
  url="$(echo ${url/$type\//})"

  ref="$(echo ${url} | cut -d/ -f1)"

  if [[ ${url} == ${ref} ]]; then
    # got whole URL already, get whole repo
    root=
    echo "Fetching ${user}:${repo}@${ref} (whole repo)"
  else
    root="$(echo ${url/$ref\//})"
    echo "Fetching ${user}:${repo}/${root}@${ref}"
  fi
fi

if [[ $verbose == true ]] || [[ $parse_only == true ]]; then
  echo user=${user}
  echo repo=${repo}
  echo type=${type}
  echo ref=${ref}
  echo root=${root}
  exit 0
fi

n_api_calls=0

if [[ ! -z "${dest_dir}" ]]; then
  cd "${dest_dir}"
fi

if [[ -z ${ref} ]]; then
  api_rq_url="${apiurl}/repos/${user}/${repo}"
  res="$(github_api $api_rq_url)"
  if [[ $? != 0 ]]; then
    raise_api_error "API call failed" $1 >&2
  fi

  ref="$(echo $res | jq -r '.default_branch' 2>/dev/null)"

  if [[ $? != 0 ]]; then
    raise_api_error "Could not parse API response" "${1}"
  fi

  echo Using default branch: $ref
fi

api_rq_url="${apiurl}/repos/${user}/${repo}/git/trees/${ref}"

if [[ ${type} == tree ]]; then
  get_dir "${api_rq_url}" "${root}"

elif [[ ${type} == blob ]]; then
  target=$(urldecode "${root}")
  get_file "${api_rq_url}" "${target}"

fi

echo
echo Finished
