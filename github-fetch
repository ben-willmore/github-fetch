#!/bin/bash

# todo :
# either handle * in filenames or generate an error when it appears
# add tests for:
# * unicode chars like tilde-n
# * permissions
# * symlinks, files within a symlinked dir

## functions

apiurl=https://api.github.com

LANG=C

# https://www.baeldung.com/linux/uri-encode-curl
# +-------------------------------+
# | Char | PEChar | Char | PEChar |
# |------+--------+------+--------|
# | :    | %3A    | &    | %26    |
# | /    | %2F    | '    | %27    |
# | ?    | %3F    | (    | %28    |
# | #    | %23    | )    | %29    |
# | [    | %5B    | *    | %2A    |
# | ]    | %5D    | +    | %2B    |
# | @    | %40    | ,    | %2C    |
# | !    | %21    | ;    | %3B    |
# | $    | %24    | =    | %3D    |
# | %    | %25    | ' '  | %20    |
# +-------------------------------+

urlencode () {
  proto=$(echo "$1" | grep :// | sed -e's,^\(.*://\).*,\1,g')
  url="$(echo ${1/$proto/})"
  printf "${proto}"
  local l="${#url}"
  for (( i = 0 ; i < l ; i++ )); do
    local c="${url:i:1}"
    case "$c" in
      # / is missing, becaue that would also translate the separators. Probably we should really
      # separate out the bits of the URL and encode each one. I'm not sure it makes a difference
      # unless you can have / in a git filename. Maybe on windows?
      [:?\#\[\]@!$%\&\'\(\)\*\+\,\;={}\ ]) printf '%%%.2X' "'$c" ;;
      *) printf "$c" ;;
    esac
  done
}

urldecode () {
  local data=${1//+/ }
  printf '%b' "${data//%/\\x}"
}

github_api () {
  # never use cache if third argument is set
  if [[ "${use_cache}" == true ]] && [[ -z "${3}" ]]; then
    cache_filename=${cache_dir}/$(echo $1 | tr  '/' '-') 
    if [[ -f "${cache_filename}" ]]; then
      echo Found in cache: $1 >&2
      res=$(cat "${cache_filename}")
    else
      echo Saving to cache: $1 >&2
      res=$(wget -qO- $1)
      code=$?
      echo $res > "${cache_filename}"
    fi
  else
    if [[ $use_curl == true ]]; then
      res=$(curl -sS "${1}")
    else
      res=$(wget -qO- "${1}")
    fi
   
    code=$?
  fi

  n_api_calls=$((n_api_calls+1))
  echo $res
  exit $code
}

get_rate_limit() {
  res=$(github_api $apiurl/rate_limit false)
  limit=$(echo $res | jq ".rate.limit")
  remaining=$(echo $res | jq ".rate.remaining")
  reset_epoch=$(echo $res | jq ".rate.reset")
  reset_str=$(date -d @$reset_epoch 2>/dev/null)
  if [[ $? != 0 ]]; then
    reset_str=$(date -j -f %s $reset_epoch 2>/dev/null)
  fi
  if [[ -z $reset_str ]]; then
    echo "$remaining calls remaining (of $limit\)"
  else
    echo "$remaining calls remaining (of $limit); reset at $reset_str"
  fi
}

raise_api_error () {
  echo Error: $1
  echo

  api_limit=$(get_rate_limit)
  n_remaining="$(echo $api_limit | cut -d" " -f1)"
  if [[ $n_remaining == 0 ]]; then
    echo Github API rate limit reached:
    echo $api_limit
  else
    echo API URL: $2
    if [[ $n_api_calls == 0 ]]; then
      echo You probably provided an invalid or unsupported URL
    else
      echo Unknown failure
    fi
  fi
  echo
  exit 2
}

make_dir () {
  mkdir "${1}"
  if [[ $? != 0 ]]; then
    echo "Error -- could not make directory:"
    echo "`pwd`/${1}"
    echo
    exit 1
  fi
}

download_file () {
  # if [[ $verbose == true ]]; then
  #   echo "Fetching \"${1}\" as \"${2}\" with perms \"${3}\""
  # fi

  IFS= encoded_url=$(urlencode "${1}")
  if [[ "${verbose}" == true ]]; then
    echo "Encoded URL: ${encoded_url}"
  fi
  if [[ $use_curl == true ]]; then
    curl -sS -o "./${2}" "${encoded_url}"
  else
    wget -nv -O "./${2}" "${encoded_url}"
  fi

  if [[ $? != 0 ]]; then
    echo File download failed for URL:
    echo "${1}"
    exit 4
  fi
  if [[ ! -z "${3}"  ]]; then
    chmod "${3#100}" "${2}"
  fi
}

dig_to_target () {
    # $1 root API URL for the repo
    # $2 path of target
    # return API URL for target

    url=$1
    last_url=

    bits=$(echo "${2}" | tr '/' '\n')

    to_match=
    while IFS= read -r bit; do
      if [[ ${url} != ${last_url} ]]; then
        res="$(github_api $url)"
        if [[ $? != 0 ]]; then
          raise_api_error "API call failed" $1 >&2
        fi
        last_url="${url}"
      fi
      bit=$(echo "${bit}" | tr -d '\n')
      to_match+="${bit}"
      url=$(echo $res | jq --arg x "${to_match}" -r '.tree[] | select(.path==$x) | .url' 2>/dev/null)
      if [[ -z "${url}" ]]; then
        to_match+='/'
      else
        to_match=
      fi
    done <<< "${bits}"

    echo "${url}"
}

get_dir () {
  if [[ "${verbose}" == true ]]; then
    echo "Getting dir ${2}"
    echo "Base API URL: ${1}"
  fi

  if [[ -z "${2}" ]]; then
    dest_dir="${repo}"
    root_slash=
    prefix=
  else
    base=$(basename "${2}")
    dest_dir="${base}"
    root_slash=/
    prefix="${2}/"
  fi

  make_dir "${dest_dir}"
  cd "./${dest_dir}"

  if [[ -z "${2}" ]]; then
    url="${1}"
  else
    if [[ "${verbose}" == true ]]; then
      echo "Digging from ${1} to ${2}"
    fi
    url=$(dig_to_target "${1}" "${2}")
  fi

  res="$(github_api $url?recursive=true)"
  if [[ $? != 0 ]]; then
    raise_api_error "API call failed" $url?recursive=true >&2
  fi

  if [[ $? != 0 ]]; then
    raise_api_error "Could not parse API response" "${1}"
  fi

  echo $res | jq -r '.tree[] | select(.type=="blob") | .path' >> github-fetch-tmp-catalog.txt

  while IFS= read -r filepath; do

    if [[ $verbose == true ]]; then
      echo "== Path: ${filepath}=="
    fi

    perms=$(echo $res | jq --arg x "${filepath}" -r '.tree[] | select(.path==$x) | .mode')
    dl_path="${filepath#$prefix}"
    dl_dir=$(dirname "${dl_path}")
    if [[ ! -z "${dl_dir}" ]]; then
      mkdir -p "${dl_dir}"
    fi
    dl_url="https://raw.githubusercontent.com/${user}/${repo}/${ref}${root_slash}${root}/${filepath}"

    if [[ $verbose == true ]]; then
      echo "Fetching \"${dl_url}\" as \"${dl_path}\" with perms \"${perms}\"..."
    fi
    if [[ "${perms}" == "120000" ]]; then
      # symlink
      # https://unix.stackexchange.com/questions/193465/what-file-mode-is-a-symlink
      download_file "${dl_url}" "${dl_path}"
      target=$(cat "${dl_path}")
      rm -r "${dl_path}"
      ln -s "${target}" "${dl_path}"
    else
      # regular file
      download_file "${dl_url}" "${dl_path}" "${perms}"
    fi

  done < github-fetch-tmp-catalog.txt

  rm github-fetch-tmp-catalog.txt

  cd ..
}

get_file () {
  if [[ "${verbose}" == true ]]; then
    echo "Getting file ${2}"
    echo "Base API URL: ${1}"
  fi

  bits=$(echo "${2}" | tr '/' '\n')
  n_bits=$(echo "${bits}" | wc -l)
 
  if [[ ${n_bits} == 1 ]]; then
    url="${1}"
    base="${2}" 
  else
    subdir=$(dirname "${2}")
    if [[ "${verbose}" == true ]]; then
      echo "Digging from ${1} to ${2}"
    fi

    url=$(dig_to_target "${1}" "${subdir}")
    base=$(basename "${2}")
  fi

  res="$(github_api $url)"
  if [[ $? != 0 ]]; then
    raise_api_error "API call failed" $url >&2
  fi

  filepath=$(echo $res | jq --arg x "${base}" -r '.tree[] | select(.type=="blob" and .path==$x) | .path' 2>/dev/null)
  perms=$(echo $res | jq --arg x "${base}" -r '.tree[] | select(.type=="blob" and .path==$x) | .mode' 2>/dev/null)

  url="https://raw.githubusercontent.com/${user}/${repo}/${ref}/${2}"

  if [[ -e "${filepath}" ]]; then
    echo "Error: ${filename} already exists; can't create file"
    echo
    exit 3
  fi
  
  if [[ "${verbose}" == true ]]; then
    echo "Fetching file ${url} to ${filepath} with perms ${perms}"
  fi
  download_file "${url}" "${filepath}" "${perms}"
}

## main program

if [[ $1 == '-h' ]] || [[ $1 == '--help' ]]; then
  echo
  echo Fetch a file or directory from Github
  echo
  echo Syntax: github-fetch \<url\> [\<dest_dir\>] where \<url\> is of the form:
  echo https://github.com/ben-willmore/github-fetch
  echo  \(whole repo, default branch\)
  echo https://github.com/ben-willmore/github-fetch/tree/testbranch/test
  echo  \(subdirectory, branch testbranch\)
  echo https://github.com/ben-willmore/github-fetch/tree/aa25db658a2013f8a0004cbdbff3ff59ce3e0aaa/test
  echo  \(subdirectory, specific commit\)
  echo https://github.com/ben-willmore/github-fetch/blob/main/README.md
  echo  \(single file, main branch\)
  echo
  echo You can get the URL by navigating to the relevant file/directory\'s page on github and then
  echo copy-pasting from the URL bar.
  echo
  echo If \<dest_dir\> is supplied, the fetched directory will be put there\;
  echo otherwise it will be put in the current directory.
  echo
  echo This should work on any unix system with basic tools installed
  echo \(bash, sed, grep, ...\), including jq and wget. 
  exit 0
fi

args=
for arg in "$@"; do
  if [[ ${arg:0:2} == "--" ]] ; then
    args+=" $arg"
  elif [[ ${arg:0:1} == "-" ]] ; then
    for (( i=0; i<${#arg}; i++ )); do
      case ${arg:$i:1} in
        l)
          args+=" --limit"
          ;;
        p)
          args+=" --parse-only"
          ;;
        c)
          args+=" --curl"
          ;;
        v)
          args+=" --verbose"
          ;;
        t)
          args+=" --test"
          ;;
      esac
    done
  else
    if [[ -z $input_url ]]; then
      input_url=$arg
    else
      dest_dir=$arg
    fi
  fi
done

use_curl=false
for arg in $args; do
  case $arg in
    --*limit*)
      echo Github rate limit status:
      echo $(get_rate_limit)
      exit 0
      ;;
    --*parse*)
      parse_only=true
      ;;
    --*verb*)
      verbose=true
      ;;
    --*curl*)
      use_curl=true
      ;;
    --*test*)
      use_cache=true
      ;;
  esac
done

if [[ $verbose == true ]]; then
  echo "Arguments: $args"
fi

if [[ -z $input_url ]]; then
  echo Error: No URL was supplied
  echo
  exit 7
fi

which_wget=$(which wget)
which_curl=$(which curl)

if [[ $use_curl == true ]] && [[ -z ${which_curl} ]]; then
  echo Error: cURL was requested, but is not available in path
  echo
  exit 7
fi

if [[ -z $which_wget ]]; then
  use_curl=true
fi

if [[ $verbose == true ]]; then
  if [[ $use_curl == true ]]; then
    echo "Using curl ($which_curl)"
  else
    echo "Using wget ($which_wget)"
  fi
fi

# cache setup
if [[ "${use_cache}" == true ]]; then
  if [[ "${verbose}" == true ]]; then
    echo "Setting up cache"
  fi

  script_dir=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
  cache_dir=$(realpath "${script_dir}")/cache
  mkdir -p "${cache_dir}"
fi

# parse URL
# e.g. https://github.com/ben-willmore/portmaster/tree/main/perfectdark

input_url=$(urldecode "${input_url}")

proto="$(echo $input_url | grep :// | sed -e's,^\(.*://\).*,\1,g')"
url="$(echo ${input_url/$proto/})"

host="$(echo $url | cut -d/ -f1)"
url="$(echo ${url/$host\//})"

user="$(echo $url | cut -d/ -f1)"
url="$(echo ${url/$user\//})"

repo="$(echo $url | cut -d/ -f1)"
url="$(echo ${url/$repo\//})"

if [[ ${url} == ${repo} ]]; then
  # there is no tree|blob in the URL
  # use default branch and get whole repo
  type=tree
  ref=
  root=
  echo "Fetching ${user}:${repo} (whole repo, default branch)"
else
  type="$(echo ${url} | cut -d/ -f1)"
  url="$(echo ${url/$type\//})"

  ref="$(echo ${url} | cut -d/ -f1)"

  if [[ ${url} == ${ref} ]]; then
    # got whole URL already, get whole repo
    root=
    echo "Fetching ${user}:${repo}@${ref} (whole repo)"
  else
    root="$(echo ${url/$ref\//})"
    echo "Fetching ${user}:${repo}/${root}@${ref}"
  fi
fi

if [[ "${verbose}" == true ]] || [[ "${parse_only}" == true ]]; then
  echo Parsed parameters:
  echo user=${user}
  echo repo=${repo}
  echo type=${type}
  echo ref=${ref}
  echo root=${root}
fi

if [[ "${parse_only}" == true ]]; then
  exit 0
fi

n_api_calls=0

if [[ ! -z "${dest_dir}" ]]; then
  cd "${dest_dir}"
  if [[ $? != 0 ]]; then
    echo "Couldn't change dir to ${dest_dir}"
    exit 12
  fi
fi

if [[ -z ${ref} ]]; then
  api_rq_url="${apiurl}/repos/${user}/${repo}"
  res="$(github_api $api_rq_url)"
  if [[ $? != 0 ]]; then
    raise_api_error "API call failed" $api_rq_url >&2
  fi

  ref="$(echo $res | jq -r '.default_branch' 2>/dev/null)"

  if [[ $? != 0 ]]; then
    raise_api_error "Could not parse API response" "$api_rq_url" >&2
  fi

  echo "Using default branch: ${ref}"
fi

api_rq_url="${apiurl}/repos/${user}/${repo}/git/trees/${ref}"

if [[ ${type} == tree ]]; then
  get_dir "${api_rq_url}" "${root}"

elif [[ ${type} == blob ]]; then
  target="${root}"
  get_file "${api_rq_url}" "${target}"

fi

echo
echo Finished
